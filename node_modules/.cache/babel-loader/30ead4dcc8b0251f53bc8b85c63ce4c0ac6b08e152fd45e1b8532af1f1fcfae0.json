{"ast":null,"code":"// import logo from './logo.svg';\nimport React from'react';import{BrowserRouter,Routes,Route}from\"react-router-dom\";import'./App.css';import{useState}from'react';import AppNav from'./components/AppNav';import TextForm from'./components/TextForm';import Message from'./components/Message';import About from'./components/About';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function App(){// const router = createBrowserRouter([\n//   {\n//     path: \"/\",\n//     element: <><TextForm /></>,\n//   },\n//   {\n//     path: \"/about\",\n//     element: <About/>,\n//   },\n// ]);\nconst[message,setMessage]=useState(null);const showMessage=(type,message)=>{setMessage({msg:message,type:type});setTimeout(()=>{setMessage(null);},2000);};const[darkMode,setDarkMode]=useState({backgroundColor:'white',color:'black'});const[bootstrapDarkMode,setBootstrapDarkMode]=useState('light');const[darkModeButton,setDarkModeButton]=useState('Dark');const switchDarkMode=()=>{console.log(\"click\");document.body.className='';if(darkMode.backgroundColor==='white'){document.body.style.background='black';document.body.style.color='white';setDarkMode({backgroundColor:'black',color:'white'});setBootstrapDarkMode('dark');setDarkModeButton('light');}else{setDarkMode({backgroundColor:'white',color:'black'});setBootstrapDarkMode('light');document.body.style.background='white';document.body.style.color='black';setDarkModeButton('dark');}};const[color,setColor]=useState(null);const changeColor=color=>{// document.body.style.background = bg;\n// document.body.style.color = 'clr';\nconsole.log('bg click');document.body.className='';document.body.classList.add('bg-'+color);setBootstrapDarkMode(color);};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(BrowserRouter,{children:[/*#__PURE__*/_jsx(AppNav,{bootstrapDarkMode:bootstrapDarkMode}),/*#__PURE__*/_jsx(Message,{message:message}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(TextForm,{head:\"This is a Application of text Analyser\",mode:switchDarkMode,darkMode:darkMode,bootstrapDarkMode:bootstrapDarkMode,darkModeButton:darkModeButton,showMessage:showMessage,changeColor:changeColor})}),/*#__PURE__*/_jsx(Route,{path:\"/about\",element:/*#__PURE__*/_jsx(About,{})})]})]})});}export default App;","map":{"version":3,"names":["React","BrowserRouter","Routes","Route","useState","AppNav","TextForm","Message","About","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","message","setMessage","showMessage","type","msg","setTimeout","darkMode","setDarkMode","backgroundColor","color","bootstrapDarkMode","setBootstrapDarkMode","darkModeButton","setDarkModeButton","switchDarkMode","console","log","document","body","className","style","background","setColor","changeColor","classList","add","children","path","element","head","mode"],"sources":["/workspaces/text-utility/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\nimport React from 'react';\nimport {\n  BrowserRouter,\n  Routes,\n  Route\n} from \"react-router-dom\";\nimport './App.css';\nimport { useState } from 'react';\nimport AppNav from './components/AppNav';\nimport TextForm from './components/TextForm';\nimport Message from './components/Message';\nimport About from './components/About';\n\n\nfunction App() {\n  // const router = createBrowserRouter([\n  //   {\n  //     path: \"/\",\n  //     element: <><TextForm /></>,\n  //   },\n  //   {\n  //     path: \"/about\",\n  //     element: <About/>,\n  //   },\n  // ]);\n\n  const [message,setMessage] = useState(null);\n  \n  const showMessage =(type,message)=>{\n    setMessage({\n      msg:message,\n      type:type\n    });\n    setTimeout(()=>{setMessage(null)},2000);\n  }\n\n\n\n\n  const [darkMode, setDarkMode] = useState({\n    backgroundColor:'white',\n    color:'black'\n  });\n  const [bootstrapDarkMode,setBootstrapDarkMode] = useState('light');\n  const [darkModeButton,setDarkModeButton] = useState('Dark');\n\n  const switchDarkMode = () =>{\n    console.log(\"click\");\n    document.body.className='';\n    if (darkMode.backgroundColor === 'white') {\n      document.body.style.background = 'black';\n      document.body.style.color = 'white';\n      setDarkMode({\n        backgroundColor:'black',\n        color:'white'\n      })\n      setBootstrapDarkMode('dark');\n      setDarkModeButton('light');\n    }else{\n      setDarkMode({\n        backgroundColor:'white',\n        color:'black'\n      })\n      setBootstrapDarkMode('light');\n      document.body.style.background = 'white';\n      document.body.style.color = 'black';\n      setDarkModeButton('dark');\n\n\n    }\n  }\n\n  const [color,setColor] = useState(null);\n  const changeColor = (color)=>{\n    // document.body.style.background = bg;\n    // document.body.style.color = 'clr';\n    console.log('bg click');\n    document.body.className='';\n    document.body.classList.add('bg-'+color);\n    setBootstrapDarkMode(color);\n\n  }\n\n\n  return (\n      <>\n      <BrowserRouter>\n      <AppNav bootstrapDarkMode={bootstrapDarkMode}></AppNav>\n      <Message message={message} ></Message>\n        <Routes>\n          <Route path='/' element={<TextForm head=\"This is a Application of text Analyser\" mode={switchDarkMode} darkMode={darkMode} bootstrapDarkMode={bootstrapDarkMode} darkModeButton={darkModeButton} showMessage={showMessage}\n          changeColor={changeColor}/>} />\n\n          <Route path='/about' element={<About/>} />\n        </Routes>\n      </BrowserRouter>\n      </>\n\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}